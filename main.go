package main

import (
	_ "alethic-ism-query-api/docs" // Swagger docs (autogenerated) but needs to be imported
	apiv1 "alethic-ism-query-api/pkg/api/v1"
	"fmt"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"net/http"
	"os"
)

func main() {
	//dataAccess = data.InitializeNewDataAccessFromEnvDSN()

	gin.SetMode(gin.DebugMode)
	gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {
		fmt.Printf("ROUTE %s %s -> %s (%d handlers)\n", httpMethod, absolutePath, handlerName, nuHandlers)
	}

	r := gin.Default()
	r.Use(gin.Logger())   // Logs each request with details
	r.Use(gin.Recovery()) // Recover from panics and log the error
	r.LoadHTMLGlob("templates/*.html")

	setupRoutesV1(r)

	// Swagger documentation route
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// ReDoc documentation route
	r.GET("/redoc/*any", RedocHandler())

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	err := r.Run(":" + port)
	if err != nil {
		return
	}
}

// @title Alethic ISM - Data Query API
// @version 1.0
// @description This is a query api for Alethic ISM using a storage class: database
// @termsOfService http://swagger.io/terms/

// @contact.name
// @contact.url
// @contact.email

// @license.name Quantum Wake OU - Copyright 2024
// @license.url

// @host localhost:8081
// @BasePath /api/v1
func setupRoutesV1(r *gin.Engine) {
	v1 := r.Group("/api/v1")
	{
		v1StateQuery := v1.Group("/state/query")
		{
			v1StateQuery.POST("/:id", apiv1.HandleQueryState)
		}
		v1Vault := v1.Group("/vault")
		{
			v1Vault.POST("", apiv1.HandleCreateVault)
			v1Vault.GET("/:id", apiv1.HandleFetchVault)
			v1Vault.DELETE("/:id", apiv1.HandleDeleteVault)
		}
	}
}

// RedocHandler serves ReDoc UI
func RedocHandler() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.HTML(http.StatusOK, "redoc.html", gin.H{
			"SpecURL": "/api/v1/query/swagger/doc.json",
		})
	}
}
