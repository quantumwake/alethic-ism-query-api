// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Quantum Wake OU - Copyright 2024"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/query/state/{id}": {
            "post": {
                "description": "Query state data with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "State"
                ],
                "summary": "Query state data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the query groups and filters",
                        "name": "dsl.StateQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dsl.StateQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dsl.StateQueryResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dsl.Filter": {
            "type": "object",
            "properties": {
                "column": {
                    "type": "string",
                    "example": "input"
                },
                "operator": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dsl.Operator"
                        }
                    ],
                    "example": "="
                },
                "value": {
                    "type": "string",
                    "example": "xyz"
                }
            }
        },
        "dsl.FilterGroup": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dsl.Filter"
                    }
                },
                "group_logic": {
                    "description": "\"AND\" or \"OR\"",
                    "type": "string",
                    "example": "AND"
                }
            }
        },
        "dsl.Operator": {
            "type": "string",
            "enum": [
                "=",
                "like",
                "!=",
                "\u003e",
                "\u003c"
            ],
            "x-enum-varnames": [
                "Equal",
                "Like",
                "NotEqual",
                "GreaterThan",
                "LessThan"
            ]
        },
        "dsl.StateQuery": {
            "type": "object",
            "properties": {
                "filter_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dsl.FilterGroup"
                    }
                },
                "state_id": {
                    "type": "string",
                    "example": "465884e9-7a08-40d0-acff-148663a7c9cf"
                },
                "user_id": {
                    "type": "string",
                    "example": "77c17315-3013-5bb8-8c42-32c28618101f"
                }
            }
        },
        "dsl.StateQueryResult": {
            "type": "object",
            "properties": {
                "column_name": {
                    "type": "string"
                },
                "data_index": {
                    "type": "integer"
                },
                "data_value": {
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Alethic ISM - Data Query API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
